// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"go-swagger-example/mymodels"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	null_v4 "gopkg.in/guregu/null.v4"
)

// UserAccount User account information
//
// swagger:model UserAccount
type UserAccount struct {

	// audit model
	AuditModel mymodels.AuditModel `json:"auditModel,omitempty"`

	// department
	Department string `json:"department,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// gorm model
	GormModel mymodels.GormModel `json:"gormModel,omitempty"`

	// id
	ID uint32 `json:"id,omitempty"`

	// last login time
	LastLoginTime null_v4.Time `json:"lastLoginTime,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// user login
	UserLogin *UserLogin `json:"userLogin,omitempty" gorm:"foreignkey:UserID;references:id"`
}

// Validate validates this user account
func (m *UserAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserLogin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAccount) validateUserLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.UserLogin) { // not required
		return nil
	}

	if m.UserLogin != nil {
		if err := m.UserLogin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userLogin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userLogin")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user account based on the context it is used
func (m *UserAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserLogin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAccount) contextValidateUserLogin(ctx context.Context, formats strfmt.Registry) error {

	if m.UserLogin != nil {
		if err := m.UserLogin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userLogin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userLogin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAccount) UnmarshalBinary(b []byte) error {
	var res UserAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
